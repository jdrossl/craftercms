
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-text', version: '1.1'
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'

    }
}

import java.security.MessageDigest;
import org.apache.commons.lang3.SystemUtils;

task downloadGroovy() {
    description = "Downloads and checks groovy integrity"
    doFirst{
        download {
            src "https://dl.bintray.com/groovy/maven/apache-groovy-binary-${groovyVersion}.zip"
            overwrite false
            dest file("${downloadDir}/apache-groovy-${groovyVersion}.zip")
        }
        download {
            src "https://dl.bintray.com/groovy/maven/apache-groovy-binary-${groovyVersion}.zip.sha256"
            dest file("${downloadDir}/apache-groovy-${groovyVersion}.zip.sha256")
            overwrite false
        }
    }
    doLast{
        assert sha256(new File(downloadDir, "apache-groovy-${groovyVersion}.zip")) ==  new File(downloadDir, "apache-groovy-${groovyVersion}.zip.sha256").getText('UTF-8')
    }
}

task downloadTomcat() {
    description = "Downloads and checks tomcat integrity"
    doFirst{
        download {
            src "http://archive.apache.org/dist/tomcat/tomcat-8/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip"
            overwrite false
            dest file("${downloadDir}/apache-tomcat-${tomcatVersion}.zip")
        }
        download {
            src "http://archive.apache.org/dist/tomcat/tomcat-8/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip.sha1"
            dest file("${downloadDir}/apache-tomcat-${tomcatVersion}.zip.sha1")
            overwrite false
        }
    }
    doLast{
        assert sha1(new File(downloadDir, "apache-tomcat-${tomcatVersion}.zip")) ==  new File(downloadDir, "apache-tomcat-${tomcatVersion}.zip.sha1").getText('UTF-8').split(" ")[0]
    }
}

task downloadSolr() {
    description = "Unzip Solr and Solr's war (from Maven central) signature"
    doFirst{
        download {
            src "http://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.zip"
            overwrite false
            dest file("${downloadDir}/solr-${solrVersion}.zip")
        }
        download {
            src "http://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.zip.sha1"
            dest file("${downloadDir}/solr-${solrVersion}.zip.sha1")
            overwrite false
        }
    }
    doLast{
        assert sha1(new File(downloadDir, "solr-${solrVersion}.zip")) == new File(downloadDir, "solr-${solrVersion}.zip.sha1").getText('UTF-8').split(" ")[0]
    }
}

task downloadElasticSearch() {
  description = "Downdloads and checks ElasticSearch integrity"
  doFirst {
    download {
      src "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${elasticSearchVersion}.zip"
      overwrite false
      dest file("${downloadDir}/elasticsearch-${elasticSearchVersion}.zip")
    }
    download {
        src "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${elasticSearchVersion}.zip.sha512"
        dest file("${downloadDir}/elasticsearch-${elasticSearchVersion}.zip.sha512")
        overwrite false
    }
  }
  doLast {
    assert sha512(new File(downloadDir, "elasticsearch-${elasticSearchVersion}.zip")) == new File(downloadDir, "elasticsearch-${elasticSearchVersion}.zip.sha512").getText('UTF-8').split(" ")[0]
  }
}

task downloadIEDriver {
    doFirst{
        download{
            src WINDOWS_IE_DRIVER_URL
            overwrite false
            dest ("./src/test-suite/bin/ie-x64.zip")
        }
        copy {
            from zipTree("./src/test-suite/bin/ie-x64.zip")
            into "./src/test-suite/bin/${browserToTest}-win/"
        }
    }
}

task downloadEdgeDriver(){
    doFirst{
        file("./src/test-suite/bin/").mkdir()
       def winBuildNumber =getWindowsBuildNumber();
        def url=""
        if(WINDOWS_EDGE_DRIVER_URL.containsKey(winBuildNumber)){
            url=WINDOWS_EDGE_DRIVER_URL[winBuildNumber]
        }
        if(url.endsWith(".msi")){
            println ("Your current Selenium Driver is an MSI installer, please \n install it in this path `./src/test-suite/bin` and make sure that you configure properly the `./src/test-suite/test-properties.properties`")
        }
        if(!url.isEmpty()){
            println url
            download{
                src url
                overwrite false
                dest ("./src/test-suite/bin/edge/MicrosoftWebDriver.exe")
                acceptAnyCertificate true
            }
        }else{
            println "We could not found a suitable selenium driver for your windows build  ${winBuildNumber}"
            println "Please go to https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/ and download"
            println "the proper driver version and then configure its location in the `./src/test-suite/test-properties.properties` file "
        }
    }
}

task downloadChromeDriver(){
    doFirst{
        def platform=""
        if(SystemUtils.IS_OS_WINDOWS){
            platform = "win32"
        }else if(SystemUtils.IS_OS_LINUX){
            platform = "linux64"
        }else{
            platform = "mac64"
        }
        download{
            src "https://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${platform}.zip"
            overwrite false
            dest ("./src/test-suite/bin/chromedriver-${testingPlatform}.zip")
        }
        copy {
            from zipTree("./src/test-suite/bin/chromedriver-${testingPlatform}.zip")
            into "./src/test-suite/bin/${browserToTest}-${testingPlatform}/"
        }
    }
}

task downloadMariaDB4j {
  doFirst {
    download {
      src "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=org.craftercms.mariaDB4j&a=mariaDB4j-app&v=$mariadb4jVersion"
      overwrite false
      dest "${downloadDir}/mariaDB4j-app-${mariadb4jVersion}.jar"
    }
  }
}

def messageDigest(file, alg) {
  MessageDigest md = MessageDigest.getInstance(alg);
  FileInputStream fis = new FileInputStream(file.path);
  byte[] dataBytes = new byte[1024];
  int nread = 0;
  while ((nread = fis.read(dataBytes)) != -1) {
      md.update(dataBytes, 0, nread);
  };
  byte[] mdbytes = md.digest();
  //convert the byte to hex format
  StringBuffer sb = new StringBuffer("");
  for (int i = 0; i < mdbytes.length; i++) {
      sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));
  }
  return sb.toString()
}

def sha1(file) {
  messageDigest(file, "SHA1");
}

def sha256(file) {
  messageDigest(file, "SHA-256");
}

def sha512(file) {
  messageDigest(file, "SHA-512")
}

def getWindowsBuildNumber(){
  try {
    def term = "OS Version"
    Runtime rt = Runtime.getRuntime();
    Process pr = rt.exec("CMD /C SYSTEMINFO | FINDSTR /B /C:\"" + term + "\"");
    BufferedReader input = new BufferedReader(new InputStreamReader(pr.getInputStream()));
    def fullwinVersion = input.readLine()
    return fullwinVersion.substring(fullwinVersion.lastIndexOf("Build") + 6)
  } catch (IOException e) {
    System.err.println(e.getMessage());
  }
  return "";
}
